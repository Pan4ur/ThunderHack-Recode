package thunder.hack.features.modules.misc;

import meteordevelopment.orbit.EventHandler;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Box;
import net.minecraft.util.math.Vec3d;
import org.jetbrains.annotations.NotNull;
import org.lwjgl.glfw.GLFW;
import thunder.hack.events.impl.EventSync;
import thunder.hack.events.impl.PacketEvent;
import thunder.hack.features.modules.Module;
import thunder.hack.setting.Setting;
import thunder.hack.setting.impl.Bind;
import thunder.hack.setting.impl.ColorSetting;
import thunder.hack.utility.render.Render3DEngine;

import java.awt.*;

public class ChorusExploit extends Module {
    public ChorusExploit() {
        super("ChorusExploit", Category.MISC);
    }

    private final Setting<Bind> confirm = new Setting<>("Confirm", new Bind(GLFW.GLFW_KEY_LEFT_SHIFT, false, false));
    private final Setting<ColorSetting> color = new Setting<>("Color", new ColorSetting(new Color(0xFFFFFF)));

    Vec3d choruspos = null;
    PlayerPositionLookS2CPacket chorusPacket = null;
    boolean isEatingChorus = false;
    int chorusTicks = 0;

    @Override
    public void onDisable() {
        if (chorusPacket != null) {
            chorusPacket.apply(mc.player.networkHandler);
            reset();
        }
    }

    private void reset() {
        chorusPacket = null;
        choruspos = null;
    }

    public void onRender3D(MatrixStack stack) {
        if (choruspos != null)
            Render3DEngine.drawBoxOutline(new Box(choruspos.add(-0.27, 0, -0.27), choruspos.add(0.27, 1.8, 0.27)), color.getValue().getColorObject(), 2);
    }

    @EventHandler
    public void onUpdate(EventSync e) {
        if (mc.player.getActiveItem() == null) return;
        if (mc.player.getActiveItem().getItem() == Items.CHORUS_FRUIT) {
            isEatingChorus = true;
        } else if (isEatingChorus) {
            chorusTicks++;
            if (chorusTicks > 5) {
                isEatingChorus = false;
                chorusTicks = 0;
            }
        }
        if (isKeyPressed(confirm) && chorusPacket != null) {
            chorusPacket.apply(mc.getNetworkHandler());
            reset();
        }
    }

    @EventHandler
    public void onPacketReceive(PacketEvent.@NotNull Receive e) {
        if (e.getPacket() instanceof PlayerPositionLookS2CPacket) {
            if (isEatingChorus || choruspos != null) {
                chorusPacket = e.getPacket();
                choruspos = new Vec3d(chorusPacket.getX(), chorusPacket.getY(), chorusPacket.getZ());
                e.cancel();
            }
        }
    }

    @EventHandler
    public void onPacketSend(PacketEvent.Send e) {
        if (chorusPacket != null)
            if (e.getPacket() instanceof PlayerMoveC2SPacket
                    || e.getPacket() instanceof PlayerMoveC2SPacket.Full
                    || e.getPacket() instanceof PlayerMoveC2SPacket.LookAndOnGround
                    || e.getPacket() instanceof PlayerMoveC2SPacket.OnGroundOnly
                    || e.getPacket() instanceof PlayerMoveC2SPacket.PositionAndOnGround
            ) e.cancel();
    }
}
